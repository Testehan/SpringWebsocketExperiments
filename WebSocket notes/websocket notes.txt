WebSocket is used as a communication protocol that provides full-duplex communication channels over a
single, long-lived connection between a client and a server. In this protocol, there are no restrictions
like HTTP that for a response you have to make a request first.

In HTTP client has to request only the response or the payload from the server will be given and then the
connection is terminated. Now if you require further payload or data then you have to repeat the whole process.
    - WebSocket client establishes the socket connection with the server and receives the message or data
        without any refresh
    - The connection won’t be terminated which means that we can again receive the message.

WebSocket is a bi-directional protocol which means that the server and client can exchange the
message in parallel and it decreases the round trip and the time for response. An application like trading,
monitoring, or creating functionality like notifications WebSocket is very useful.

WebSocket is a thin, lightweight layer above TCP. This makes it suitable for using “subprotocols” to embed messages.
In this guide, we use STOMP messaging with Spring to create an interactive web application.
STOMP is a subprotocol operating on top of the lower-level WebSocket.

after the client sends a message, the server can take as long as it needs to asynchronously process the
message. The client can continue with whatever work it needs to do without waiting for the response.

The WebSocket protocol is one of the ways to make your application handle real-time messages. The most common
alternatives are long polling and server-sent events

It is important to know that HTTP is used only for the initial handshake. After it happens, the HTTP connection
is upgraded to a newly opened TCP/IP connection that is used by a WebSocket.

It defines how a stream of bytes is transformed into frames. A frame may contain a text or a binary message.
Because the message itself does not provide any additional information on how to route or process it, It
is difficult to implement more complex applications without writing additional code. Fortunately, the WebSocket
specification allows using of sub-protocols that operate on a higher, application level. One of them, supported
by the Spring Framework, is STOMP.

They follow the convention that destinations for messages to be carried on to all subscribed clients via the
pub-sub model should be prefixed with "topic". On the other hand, destinations for private messages are
typically prefixed by "queue".

Instead of the annotation @SendTo, you can also use SimpMessagingTemplate which you can autowire inside your controller.

Then, the client and the server-side must use a separate destination dedicated to this private conversation.
The name of the destination may be created by appending a unique identifier to a general destination name,
e.g., /queue/chat-user123. HTTP Session or STOMP session identifiers can be utilized for this purpose.

WebSockets vs. Alternatives:
    Long Polling: Picture yourself waiting for your friend’s reply (the server) while holding onto your
        letter (the request). Long Polling is like that — the client keeps asking for updates until the
        server has something new. It’s inefficient and wastes resources.
    Server-Sent Events: Think of your friend (the server) only talking to you (the client), without you
        being able to respond — that’s Server-Sent Events. It’s good for one-way updates, but lacks the
        interactive power of WebSockets.
    MQTT: Imagine a radio station broadcasting news — anyone can tune in (clients) and receive updates.
        MQTT is similar, but focuses on lightweight messaging for resource-constrained environments.

The use of different prefixes for client-to-server messages ("/app") and server-to-client messages
("/topic") helps in cleanly separating the concerns of sending messages from clients to the server and
broadcasting messages from the server to multiple clients.

authentication can be performed during the handshake process when working with sockets. This handshake
is the initial connection establishment between the client and server and is a prime opportunity to
verify the client's identity before allowing communication.

Handshake Request: The client sends a handshake request to the server, which might include additional
data beyond the basic connection details.
Authentication Information: This additional data can include credentials for authentication, such as:
    Username and password
    Session tokens (JWT, cookies)
    API keys
Server Verification: The server receives the handshake request and verifies the provided credentials
using its authentication mechanisms (e.g., checking databases, validating tokens).
Handshake Success/Failure: Based on the verification result, the server either accepts the handshake
and allows the connection to proceed, or rejects it and closes the connection.



DONE    https://spring.io/guides/gs/messaging-stomp-websocket

DONE    https://medium.com/javarevisited/web-socket-with-spring-real-time-connections-made-easy-c5e3e869e455

DONE https://youtu.be/1cFyfT0m3bA?si=CZmJ-cZJdibm4cLH
    HTTP Long Polling vs Server Sent Events vs Websockets | Tech Primers

TODO https://www.youtube.com/watch?v=7T-HnTE6v64
    WebSocket Tutorial with Spring Boot | Build One On One Chat Application
    Create a new module for this on on one chat app


DONE https://youtu.be/QNMItUBPxaI?si=j-qZDo2e8SBRDwrT
    How to Send Push Notifications with Spring Boot Using Websockets and STOMP

DONE  https://youtu.be/CzcfeL7ymbU?si=m1PbHFK7Xz5wbczg
    WebSockets Beginners Tutorial with Socket.IO
        Dan: i went fast since the code examples are in js code

DONE https://www.youtube.com/watch?v=TywlS9iAZCM
    Spring boot & WebSockets: Build a Real-Time Chat App From Scratch

DONE    https://www.geeksforgeeks.org/spring-boot-web-socket/